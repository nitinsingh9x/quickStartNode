"use strict";
/* tslint:disable:no-unused-variable */
var app_component_1 = require('./app.component');
var testing_1 = require('@angular/core/testing');
var testing_2 = require('@angular/compiler/testing');
var platform_browser_1 = require('@angular/platform-browser');
////////  SPECS  /////////////
/// Delete this
testing_1.describe('Smoke test', function () {
    testing_1.it('should run a passing test', function () {
        testing_1.expect(true).toEqual(true, 'should pass');
    });
});
testing_1.describe('AppComponent with TCB', function () {
    testing_1.it('should instantiate component', testing_1.async(testing_1.inject([testing_2.TestComponentBuilder], function (tcb) {
        tcb.createAsync(app_component_1.AppComponent).then(function (fixture) {
            testing_1.expect(fixture.componentInstance instanceof app_component_1.AppComponent).toBe(true, 'should create AppComponent');
        });
    })));
    testing_1.it('should have expected <h1> text', testing_1.async(testing_1.inject([testing_2.TestComponentBuilder], function (tcb) {
        tcb.createAsync(app_component_1.AppComponent).then(function (fixture) {
            // fixture.detectChanges();  // would need to resolve a binding but we don't have a binding
            var h1 = fixture.debugElement.query(function (el) { return el.name === 'h1'; }).nativeElement; // it works
            h1 = fixture.debugElement.query(platform_browser_1.By.css('h1')).nativeElement; // preferred
            testing_1.expect(h1.innerText).toMatch(/angular 2 app/i, '<h1> should say something about "Angular 2 App"');
        });
    })));
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsdUNBQXVDO0FBQ3ZDLDhCQUE2QixpQkFBaUIsQ0FBQyxDQUFBO0FBRS9DLHdCQUtPLHVCQUF1QixDQUFDLENBQUE7QUFFL0Isd0JBQXFDLDJCQUEyQixDQUFDLENBQUE7QUFFakUsaUNBQStCLDJCQUEyQixDQUFDLENBQUE7QUFLM0QsOEJBQThCO0FBRTlCLGVBQWU7QUFDZixrQkFBUSxDQUFDLFlBQVksRUFBRTtJQUNyQixZQUFFLENBQUMsMkJBQTJCLEVBQUU7UUFDOUIsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBUSxDQUFDLHVCQUF1QixFQUFFO0lBRWhDLFlBQUUsQ0FBQyw4QkFBOEIsRUFDL0IsZUFBSyxDQUFDLGdCQUFNLENBQUMsQ0FBQyw4QkFBb0IsQ0FBQyxFQUFFLFVBQUMsR0FBeUI7UUFFL0QsR0FBRyxDQUFDLFdBQVcsQ0FBQyw0QkFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztZQUN4QyxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsWUFBWSw0QkFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBQ3JHLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRUwsWUFBRSxDQUFDLGdDQUFnQyxFQUNqQyxlQUFLLENBQUMsZ0JBQU0sQ0FBQyxDQUFDLDhCQUFvQixDQUFDLEVBQUUsVUFBQyxHQUF5QjtRQUU3RCxHQUFHLENBQUMsV0FBVyxDQUFDLDRCQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQzFDLDJGQUEyRjtZQUUzRixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFoQixDQUFnQixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUUsV0FBVztZQUVuRixFQUFFLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMscUJBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBWSxZQUFZO1lBRXhGLGdCQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxpREFBaUQsQ0FBQyxDQUFDO1FBQ3BHLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCB7IEFwcENvbXBvbmVudCB9IGZyb20gJy4vYXBwLmNvbXBvbmVudCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIGV4cGVjdCwgaXQsIGlpdCwgeGl0LFxyXG4gIGRlc2NyaWJlLCBkZGVzY3JpYmUsIHhkZXNjcmliZSxcclxuICBiZWZvcmVFYWNoLCBiZWZvcmVFYWNoUHJvdmlkZXJzLCB3aXRoUHJvdmlkZXJzLFxyXG4gIGFzeW5jLCBpbmplY3RcclxufSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5cclxuaW1wb3J0IHsgVGVzdENvbXBvbmVudEJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9jb21waWxlci90ZXN0aW5nJztcclxuXHJcbmltcG9ydCB7IEJ5IH0gICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IHByb3ZpZGUgfSAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdNZXRhZGF0YSB9ICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb21pc2VXcmFwcGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvZmFjYWRlL3Byb21pc2UnO1xyXG5cclxuLy8vLy8vLy8gIFNQRUNTICAvLy8vLy8vLy8vLy8vXHJcblxyXG4vLy8gRGVsZXRlIHRoaXNcclxuZGVzY3JpYmUoJ1Ntb2tlIHRlc3QnLCAoKSA9PiB7XHJcbiAgaXQoJ3Nob3VsZCBydW4gYSBwYXNzaW5nIHRlc3QnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QodHJ1ZSkudG9FcXVhbCh0cnVlLCAnc2hvdWxkIHBhc3MnKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnQXBwQ29tcG9uZW50IHdpdGggVENCJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICBpdCgnc2hvdWxkIGluc3RhbnRpYXRlIGNvbXBvbmVudCcsXHJcbiAgICBhc3luYyhpbmplY3QoW1Rlc3RDb21wb25lbnRCdWlsZGVyXSwgKHRjYjogVGVzdENvbXBvbmVudEJ1aWxkZXIpID0+IHtcclxuXHJcbiAgICB0Y2IuY3JlYXRlQXN5bmMoQXBwQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBleHBlY3QoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSBpbnN0YW5jZW9mIEFwcENvbXBvbmVudCkudG9CZSh0cnVlLCAnc2hvdWxkIGNyZWF0ZSBBcHBDb21wb25lbnQnKTtcclxuICAgIH0pO1xyXG4gIH0pKSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGF2ZSBleHBlY3RlZCA8aDE+IHRleHQnLFxyXG4gICAgYXN5bmMoaW5qZWN0KFtUZXN0Q29tcG9uZW50QnVpbGRlcl0sICh0Y2I6IFRlc3RDb21wb25lbnRCdWlsZGVyKSA9PiB7XHJcblxyXG4gICAgICB0Y2IuY3JlYXRlQXN5bmMoQXBwQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICAvLyBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTsgIC8vIHdvdWxkIG5lZWQgdG8gcmVzb2x2ZSBhIGJpbmRpbmcgYnV0IHdlIGRvbid0IGhhdmUgYSBiaW5kaW5nXHJcblxyXG4gICAgICBsZXQgaDEgPSBmaXh0dXJlLmRlYnVnRWxlbWVudC5xdWVyeShlbCA9PiBlbC5uYW1lID09PSAnaDEnKS5uYXRpdmVFbGVtZW50OyAgLy8gaXQgd29ya3NcclxuXHJcbiAgICAgICAgICBoMSA9IGZpeHR1cmUuZGVidWdFbGVtZW50LnF1ZXJ5KEJ5LmNzcygnaDEnKSkubmF0aXZlRWxlbWVudDsgICAgICAgICAgICAvLyBwcmVmZXJyZWRcclxuXHJcbiAgICAgIGV4cGVjdChoMS5pbm5lclRleHQpLnRvTWF0Y2goL2FuZ3VsYXIgMiBhcHAvaSwgJzxoMT4gc2hvdWxkIHNheSBzb21ldGhpbmcgYWJvdXQgXCJBbmd1bGFyIDIgQXBwXCInKTtcclxuICAgIH0pO1xyXG5cclxuICB9KSkpO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
